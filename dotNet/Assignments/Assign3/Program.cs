using System.Xml.Linq;

namespace Assign3
{

    /*
     Create the following classes
Employee
   Prop	
	string Name -> no blanks
	int EmpNo -> readonly, autogenerated
	short DeptNo -> > 0
	abstract decimal Basic 
   Methods
	abstract decimal CalcNetSalary()


Manager : Employee
   Prop
	string Designation -> cant be blank
	

GeneralManager : Manager
   Prop
 	string Perks -> no validations

CEO : Employee
      Make CalNetSalary() a sealed method

NOTE :  Overloaded constructors in all classes calling their base class constructor 
        All classes must implement IDbFunctions interface
        All classes to override the abstract members defined in the base class(Employee). 
        Basic property to have different validation in different classes.
     */
    internal class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Hello, Pooja !!!!!");
            {
                Manager m = new Manager();

                generalManager gm = new generalManager("Pooja");

                CEO c = new CEO();


            }
            
        }
    }

    public interface IDbFunctions
    {
        void Insert();
        void Delete();
        void Update();
    }



    public abstract class Employee : IDbFunctions
    {
        private String name;
        private int empNo;
        private short deptNo;
        static int prevEmpNo = 0; //for  auto increment Emp no
        private decimal basic;
        public Employee(String Name = "NoName", decimal Basic = 2000, short DeptNo = 1)
        {
             
            this.EmpNo = ++prevEmpNo;
            this.Name = Name;
            this.DeptNo = DeptNo;
            this.Basic = Basic;
        }
        public abstract decimal GetNetSalary();  

        public void Insert()
        {
            throw new NotImplementedException();
        }

        public void Delete()
        {
            throw new NotImplementedException();
        }

        public void Update()
        {
            throw new NotImplementedException();
        }
          

        public short DeptNo
        {
            get
            {
                return deptNo;
            }
            set
            {

                if (value > 0)
                {
                    deptNo = value;
                }
                else
                {
                    Console.WriteLine("Enter valid dept no");
                }

            }
        }

        public abstract decimal Basic { get; set; }
        public int EmpNo
        {

            set
            {
                if (value > 0)
                {
                    empNo = value;
                }
                else
                {
                    Console.WriteLine("Enter valid Emp no");
                }

            }
            get
            {
                return empNo;
            }
        }


        public String Name
        {
            get
            {
                return name;
            }

            set
            {

                if (value != null)
                {
                    name = value;
                }
                else
                { 
                    Console.WriteLine("Enter valid name");
                }
            }
        }
    }

    public class Manager : Employee
    {

        private String designation;

        public Manager(String designation = "NoDesignation") : base()
        {

            this.Designation = Designation;
        }

        public String Designation
        {
            get { return designation; }

            set
            {
                if (value != null)
                {
                    designation = value;
                }
                else
                { 
                    Console.WriteLine("Enter valid designation");
                }
            }
        }

        public override decimal Basic { get; set; }  

        public override decimal GetNetSalary()
        {
            decimal salary = 500;
            salary = Basic + salary;
            return salary;
        }
    }
    public class generalManager : Manager
    {
        private String perks;

        public generalManager(String Perks = "No Perks")
        {
            this.Perks = Perks;
        }

        public String Perks { get; set; }
    }

    public class CEO : Employee
    {
        public override decimal Basic { get; set; }  

        public sealed override decimal GetNetSalary()   
        {
            decimal salary = 800;
            salary = Basic + salary;
            return salary;
        }
    }

}